<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Arduino的门禁系统</title>
      <link href="/ji-yu-arduino-de-men-jin-xi-tong.html"/>
      <url>/ji-yu-arduino-de-men-jin-xi-tong.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于Arduino的门禁系统"><a href="#基于Arduino的门禁系统" class="headerlink" title="基于Arduino的门禁系统"></a>基于Arduino的门禁系统</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>以Arduino UNO板为核心控制器驱动蜂鸣器以及舵机，在任一方式通过的情况下打开舵机并峰鸣提示，同时APP会接收到相关通知。</p><ul><li><strong>红外遥控</strong><ul><li>用家里的随便一个遥控器，在代码中设置好键位的id即可，当然可以是手机的遥控器APP了，；</li><li>控制距离有限，而且没人会随身带遥控器，实际上没什么用；</li></ul></li><li><strong>IC卡</strong><ul><li>在代码中设置好卡ID即可，卡数没有限制，可以配合校园卡使用，当然可以模拟到手机了；</li><li>可用性极高；</li></ul></li><li><strong>WiFi</strong><ul><li>ESP01S连接寝室WiFi，手机有网络即可随时随地操控，不必在同一网络下，当然可以语音控制了；</li><li>懒得下床开门；忘带钥匙了舍友却在教室，<strong>懒人福利</strong>，<strong>模范舍友</strong>；</li></ul></li></ul><p>代码分为UNO端和ESP01S端，后者配合UNO实现手机随时随地控制，难点在于二者的通讯，网上资料大多都是基于NodeMCU等其他ESP8266集成开发版系列的，而类如ESP01S等的ESP8266串口WiFi模块的资料少之又少，大部分又是基于AT固件开发，初学时容易分不清楚开发板与模块而走弯路。UNO实现主要逻辑与控制，简单明了。</p><blockquote><p>ESP01S在烧录过程序后使用AT功能需重新刷AT固件。</p></blockquote><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>Arduino UNO 开发板</li><li>ESP01S 无线模块</li><li>MF RC522 读卡芯片</li><li>VS1838B 红外接收器</li><li>面包板、杜邦线、舵机(SG90 9g)、遥控器、校园卡、蜂鸣器(有源、可选)</li><li>其他必要附件</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><p><a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Arduino IDE</a></p></li><li><p><a href="https://github.com/esp8266/Arduino" target="_blank" rel="noopener">Arduino core for ESP8266 WiFi chip</a></p></li><li><p><a href="">Serial Tool</a> 串口助手</p></li><li><p><a href="https://diandeng.tech/home" target="_blank" rel="noopener">Blinker</a> 手机APP</p></li><li><p>IRremote、MFRC522、Blinker库</p></li><li><p>其他必要库及驱动</p><p>  以上参考官方文档进行安装，有遗漏之处自行补充。</p></li></ul><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/Ldufan/Blog_Picture/raw/master/ESP01S-UNO.png" alt="ESP01S-UNO"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="../../../Blog_Picture/AcessControl.png" alt="AcessControl"></p><blockquote><p>注意以上接线配套程序使用。</p></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Ldufan/AcessControlSystem" target="_blank" rel="noopener">代码</a>已在Github开源，有详细注释一看就懂，欢迎<strong>Star</strong>支持。<a href="https://github.com/Ldufan/AcessControlSystem" target="_blank" rel="noopener">https://github.com/Ldufan/AcessControlSystem</a></p><p>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">知识共享署名 4.0 国际许可协议</a>进行许可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Arduino </tag>
            
            <tag> ESP8266 </tag>
            
            <tag> RC522 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Arduino</title>
      <link href="/chu-shi-arduino.html"/>
      <url>/chu-shi-arduino.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识Arduino"><a href="#初识Arduino" class="headerlink" title="初识Arduino"></a>初识Arduino</h1><p>一个Arduino<a href="https://www.arduino.cn/thread-1066-1-1.html" target="_blank" rel="noopener">教程</a>帖子</p><h2 id="1-什么是Arduino"><a href="#1-什么是Arduino" class="headerlink" title="1.什么是Arduino"></a>1.什么是Arduino</h2><p>​       Arduino 是一款便捷灵活、方便上手的开源电子原型平台，包含硬件（各种型号的arduino板）和软件（arduino IDE).她适用于艺术家、设计师、爱好者和对于“互动”有兴趣的朋友们。</p><p>Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器 对Arduino的编程是利用 Arduino编程语言 (基于 Wiring)和Arduino开发环境(based on  Processing)来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。</p><h2 id="2-最基本代码结构"><a href="#2-最基本代码结构" class="headerlink" title="2.最基本代码结构"></a>2.最基本代码结构</h2><pre class="line-numbers language-c++"><code class="language-c++">void setup() {  // put your setup code here, to run once:}void loop() {  // put your main code here, to run repeatedly:}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/Robot-Will/Stino" target="_blank" rel="noopener">一款Sublime Text的Arduino插件</a>，可以在Sublime Text里进行Arduino的开发。</p><h2 id="3-一些基本概念"><a href="#3-一些基本概念" class="headerlink" title="3.一些基本概念"></a>3.一些基本概念</h2><h3 id="1）SPI"><a href="#1）SPI" class="headerlink" title="1）SPI"></a>1）SPI</h3><p>这是<a href="http://www.arduino.cc/en/Tutorial/SPIEEPROM" target="_blank" rel="noopener">官方介绍</a></p><p>Serial Peripheral Interface (SPI)（串行外围设备接口）是一种同步串行数据传输协议，用于近距离时，微控制器(Microcontrollers)，如Arduino，与其他外围设备的快速通信。他也可以用于2个微控制器的通讯。</p><p>SPI通讯通常有一个主设备（通常是Microcontrollers），用于控制外围设备。通常会有3种线路通用于各类设备的方法。</p><ul><li><p>Master In Slave Out（<strong>MISO</strong>）- Slave line，用于Slave向Master发送数据</p></li><li><p>Master Out Slave In（<strong>MOSI</strong>）- Master line，用于Master向Slave发送数据</p></li><li><p>Serial Clock（<strong>SCK</strong>）- 时钟脉冲，主设备用于同步数据传输</p></li><li><p>Slave Select pin- 分配给所有的设备，用于enable/disable指定的设备，同时用于避免由于线路忙导致的错误传输。</p></li></ul><h3 id="2）PWM"><a href="#2）PWM" class="headerlink" title="2）PWM"></a>2）PWM</h3><p><code>脉冲宽度调制</code>是一种模拟控制方式，根据相应载荷的变化来调制晶体管基极或MOS管栅极的偏置，来实现晶体管或MOS管导通时间的改变，从而实现开关稳压电源输出的改变。这种方式能使电源的输出电压在工作条件变化时保持恒定，是利用微处理器的数字信号对模拟电路进行控制的一种非常有效的技术。</p><h3 id="3）引脚"><a href="#3）引脚" class="headerlink" title="3）引脚"></a>3）引脚</h3><ul><li><strong>Power 引脚:</strong> 开发板可提供3.3V和5V电压输出，Vin引脚可用于从外部电源为开发板供电。</li><li><strong>Analog In引脚：</strong> 模拟输入引脚，开发板可读取外部模拟信号，A0~A5为模拟输入引脚。</li><li><strong>Digital 引脚：</strong>UNO R3拥有14个数字I/O引脚，其中6个可用于PWM(脉宽调制)输出。数字引脚用于读取逻辑值(0或1)，或者作为数字输出引脚来驱动外部模块。标有”~”的引脚可产生PWM。</li><li><strong>TX和RX引脚：</strong> 标有TX(发送)和RX(接收)的两个引脚用于串口通讯。其中标有TX和RX的LED灯连接相应引脚，在串口通讯时会以不同速度闪烁。</li><li><strong>13引脚：</strong>开发板标记第13引脚，连接板载LED灯，可通过控制13引脚来控制LED灯亮灭。一般拿到开发板上电板载灯都会闪烁，可辅助检测开发板是否正常。</li></ul><h2 id="4-ESP8266"><a href="#4-ESP8266" class="headerlink" title="4.ESP8266"></a>4.ESP8266</h2><ul><li><strong>ESP8266模块</strong></li></ul><p>​    首先明确概念，我们一般所说的ESP8266都是指ESP8266模块，是<a href="https://docs.ai-thinker.com/esp8266" target="_blank" rel="noopener">安信可科技</a>开发的基于<a href="https://www.espressif.com/zh-hans/products/socs/esp8266" target="_blank" rel="noopener">乐鑫</a>ESP8266EX的UART-WiFi芯片模组。它可以通过串口将信号转为WiFi信号，ESP8266模块可以通过AT指令配置与Arduino等单片机进行通信，利用WiFi进行数据传输。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="../../../Blog_Picture/ESP01S.jpg" alt="ESP01S WiFi模块"></p><ul><li><p><strong>ESP8266开发板</strong></p><p>  <strong>NodeMCU</strong>是一个开源的物联网平台。基于乐鑫esp8266，具有GPIO、PWM、I2C、1-Wire、ADC等功能。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="../../../Blog_Picture/NodeMCU.jpg" alt="NodeMCU"></p><h3 id="ESP8266的Arduino开发环境搭建"><a href="#ESP8266的Arduino开发环境搭建" class="headerlink" title="ESP8266的Arduino开发环境搭建"></a>ESP8266的Arduino开发环境搭建</h3><blockquote><p>Installing with Boards Manager <a href="https://github.com/esp8266/Arduino" target="_blank" rel="noopener">官方步骤</a></p></blockquote><ul><li>Install the current upstream Arduino IDE at the 1.8.9 level or later. The current version is on the <a href="https://www.arduino.cc/en/main/software" target="_blank" rel="noopener">Arduino website</a>.</li><li>Start Arduino and open the Preferences window.</li><li>Enter <code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code> into the <em>Additional Board Manager URLs</em> field. You can add multiple URLs, separating them with commas.</li><li>Open Boards Manager from Tools &gt; Board menu and install <em>esp8266</em> platform (and don’t forget to select your ESP8266 board from Tools &gt; Board menu after installation).</li></ul><p>注意是<code>开发板管理器 Boards Manager</code>而不是<code>库管理器</code>，使用跟Arduino一样。</p><h3 id="ESP01S与UNO的串口通信"><a href="#ESP01S与UNO的串口通信" class="headerlink" title="ESP01S与UNO的串口通信"></a>ESP01S与UNO的串口通信</h3><ul><li><p>通过UNO下载程序到ESP01S时，<code>RX-RX,TX-TX</code>；</p></li><li><p>UNO与ESP01S通信时，<code>RX-TX,TX-RX</code>，软软，软硬组合都可以，UNO使用硬串口无法给ESP01S传数据；</p></li><li><p>注意波特率要一致，ESP01S默认115200；</p></li></ul><ul><li>下载程序时UNO上的其他模块最好断电；下载完程序最好重启电源；</li></ul><h2 id="一些坑，常见问题解决方法"><a href="#一些坑，常见问题解决方法" class="headerlink" title="一些坑，常见问题解决方法"></a>一些坑，常见问题解决方法</h2><ul><li><p>arduino的一个<strong>项目必须位于单独的目录下</strong>，否则会出现<code>void setup()</code>和<code>void loop()</code>重复定义等问题。并且一个目录下只能有一个主<code>.ino</code>文件，否则也会出现异常。</p></li><li><p>用Arduino给ESP01S下载时出现 A fatal error occurred: Invalid head of packet (0x00)<br>  解决：Arduino代码的影响，Arduino的RST接地</p></li><li><p>“Connecting……..<strong><strong><em>…..</em></strong></strong>…..<strong><strong><em>…..</em></strong></strong>…..<strong><strong><em>…..</em></strong></strong>…..____”</p><p>  解决：接线问题，端口错误</p></li></ul><p>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">知识共享署名 4.0 国际许可协议</a>进行许可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Arduino </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5简单入门</title>
      <link href="/pyqt5-jian-dan-ru-men.html"/>
      <url>/pyqt5-jian-dan-ru-men.html</url>
      
        <content type="html"><![CDATA[<h1 id="pyqt5简单入门"><a href="#pyqt5简单入门" class="headerlink" title="pyqt5简单入门"></a>pyqt5简单入门</h1><p>数据挖掘作业需要做UI，学了一点，发现资料挺少的，这里记录下用过的功能。主要使用designer设计，简单快捷。pyqt实现了界面与业务逻辑的分离，不仅逻辑清晰而且维护方便。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装是个比较麻烦的事情，一开始anaconda和pip交叉使用，各种报错，原因可能是anaconda管理的包和pip的版本不同，导致升级了这里那里不匹配，降级了那里这里又报错了。无奈之下选择了抛弃anaconda，使用pip两分钟搞定。</p><h2 id="基本使用框架"><a href="#基本使用框架" class="headerlink" title="基本使用框架"></a>基本使用框架</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true">#基本框架</span><span class="token keyword">import</span> sys<span class="token comment" spellcheck="true">#PyQt5中使用的基本控件都在PyQt5.QtWidgets模块中</span><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token comment" spellcheck="true">#导入designer工具生成的login模块</span><span class="token keyword">from</span> login <span class="token keyword">import</span> Ui_Form<span class="token keyword">class</span> <span class="token class-name">MyMainForm</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyMainForm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#添加登录按钮信号和槽。注意display函数不加小括号()</span>        self<span class="token punctuation">.</span>login_Button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>display<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cancel_Button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>close<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#def display(self):</span>    <span class="token comment" spellcheck="true">#    self.user_textBrowser.setText("登录成功!")</span>    @QtCore<span class="token punctuation">.</span>pyqtSlot<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_login_Button_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_textBrowser<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"登录成功!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#固定的，PyQt5程序都需要QApplication对象。</span><span class="token comment" spellcheck="true">#sys.argv是命令行参数列表，确保程序可以双击运行</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#初始化</span>    myWin <span class="token operator">=</span> MyMainForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将窗口控件显示在屏幕上</span>    myWin<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#程序运行，sys.exit方法确保程序完整退出。</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>designer设计完成后需要通过以下方式转换成py文件使用</p><pre class="line-numbers language-bash"><code class="language-bash">pyuic5 -o UI.py UI.ui <span class="token comment" spellcheck="true">#将生成的ui文件转换为py文件使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="信号槽机制"><a href="#信号槽机制" class="headerlink" title="信号槽机制"></a>信号槽机制</h2><p>信号槽是Qt的核心机制，也是PyQt编程中对象进行通信的机制。在Qt中，QObject对象和PyQt中所有继承自QWidget的控件都支持信号槽机制。当信号发射时，连接的槽函数会自动执行。在PyQt5中，信号与槽函数通过<code>object.signal.connect()</code>方法进行连接。</p><p>内置信号是QObject对象自动定义的信号，内置槽函数是QObject对象自动定义的槽函数，可以通过<code>QObject.signal.connect</code>函数将QObject对象的内置信号连接到QObject对象的槽函数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#自定义信号与自定义槽函数</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> pyqtSignal<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span> QPushButton<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    closeSignal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"MainWindow Demo"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 连接内置信号与自定义槽</span>        button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onClicked<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 连接自定义信号closeSignal与自定义槽函数onclose</span>        self<span class="token punctuation">.</span>closeSignal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onClose<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自定义槽函数</span>    <span class="token keyword">def</span> <span class="token function">onClicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 发送自定义信号</span>        self<span class="token punctuation">.</span>closeSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自定义槽函数</span>    <span class="token keyword">def</span> <span class="token function">onClose</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    window <span class="token operator">=</span> MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#信号与槽装饰器</span>@PyQt5<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>pyqtSlot<span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token keyword">def</span> on_发送者对象名称_发射信号名称<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#实例</span>@QtCore<span class="token punctuation">.</span>pyqtSlot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_Button1_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button1 is clicked"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><pre class="line-numbers language-python"><code class="language-python">reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"提示对话框"</span><span class="token punctuation">,</span><span class="token string">"这是一个提示对话框"</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Ok <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>Close<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Close<span class="token punctuation">)</span>reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"询问对话框窗口标题！"</span><span class="token punctuation">,</span><span class="token string">"这是一个询问对话框。。。"</span><span class="token punctuation">,</span>QMessageBox<span class="token punctuation">.</span>Yes<span class="token operator">|</span>QMessageBox<span class="token punctuation">.</span>No<span class="token operator">|</span>QMessageBox<span class="token punctuation">.</span>Cancel<span class="token punctuation">,</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span>reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'警告'</span><span class="token punctuation">,</span><span class="token string">'这是一个警告消息对话框'</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Save <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>Discard <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>Cancel<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Save<span class="token punctuation">)</span>reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>critical<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'错误'</span><span class="token punctuation">,</span><span class="token string">'这是一个错误消息对话框'</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Retry <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>Abort <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>Ignore <span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Retry<span class="token punctuation">)</span>msgBox <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"关于对话框标题"</span><span class="token punctuation">,</span><span class="token string">"这是一个关于对话框"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>新建<code>.qrc</code>文件，导入designer，设置``prefix`前缀后将需要的文件复制到目录下即可使用。</p><p><code>.qrc</code>文件是一个<code>XML</code>格式的文件，描述了资源文件相对于<code>.qrc</code>的路径。</p><pre class="line-numbers language-bash"><code class="language-bash">pyrcc5 -o icon_rc.py icon.qrc <span class="token comment" spellcheck="true">#资源的使用，_rc 默认后缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> icon_rcQPixmap<span class="token punctuation">(</span><span class="token string">":/***"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#冒号 + prefix路径前缀 + file相对路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="toolbar-statusbar-menubar"><a href="#toolbar-statusbar-menubar" class="headerlink" title="toolbar statusbar menubar"></a>toolbar statusbar menubar</h2><p>比较简单，设计一个Qaction，拖到toolbar即可固定，menubar自动连接相应的Qaction，在menubar设置动作，固定的toolbar，简单方便。</p><p>知乎一个<a href="https://zhuanlan.zhihu.com/p/48373518" target="_blank" rel="noopener">系列教程</a></p><p>以上，后续遇到再补充。</p><p>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">知识共享署名 4.0 国际许可协议</a>进行许可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyqt5 </tag>
            
            <tag> designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text配置大全</title>
      <link href="/sublime-text-pei-zhi-da-quan.html"/>
      <url>/sublime-text-pei-zhi-da-quan.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sublime-Text配置大全"><a href="#Sublime-Text配置大全" class="headerlink" title="Sublime Text配置大全"></a>Sublime Text配置大全</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="http://www.sublimetext.cn/" target="_blank" rel="noopener">官网</a>，勾选<code>add to explorer context menu</code>,可以右键以Sublime Text打开</p><p>不要直接打开，删除</p><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><h2 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h2><h2 id="插件及配置"><a href="#插件及配置" class="headerlink" title="插件及配置"></a>插件及配置</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> 软件 </tag>
            
            <tag> PC </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC软件及配置备份</title>
      <link href="/pc-ruan-jian-bei-fen.html"/>
      <url>/pc-ruan-jian-bei-fen.html</url>
      
        <content type="html"><![CDATA[<h1 id="PC软件及配置备份"><a href="#PC软件及配置备份" class="headerlink" title="PC软件及配置备份"></a>PC软件及配置备份</h1><h2 id="鬼畜类"><a href="#鬼畜类" class="headerlink" title="鬼畜类"></a>鬼畜类</h2><blockquote><p>BPMAnalyzer</p><p>FL studio</p><p>UTAU</p><p>Melodyne</p><p>Adobe系列</p><blockquote><p>AU</p><p>PR</p><p>PS</p><p>AE</p></blockquote><p>小丸工具箱</p></blockquote><h2 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h2><blockquote><p>ANSYS</p><p>CAD</p><p>Creo</p><p>Solid Eorks</p><p>Matlab</p><p>Python</p><p>Scihub</p><p>SW6</p><p>冰点</p><p>幕布</p><p>福昕</p><p>SumatraPDF</p><p>E Study</p><p>Math Type</p><p>BookxNote</p><p>欧路词典</p><p>知网研学</p></blockquote><h2 id="美化类"><a href="#美化类" class="headerlink" title="美化类"></a>美化类</h2><blockquote><p>TranslucentTB</p><p>NetSpeedMoniter</p><p>F.lux</p><p>Mem Reduct</p></blockquote><h2 id="Win利器"><a href="#Win利器" class="headerlink" title="Win利器"></a>Win利器</h2><blockquote><p>Clover</p><p>Cmder</p><p>Git</p><p>Everything</p><p>IDM</p><p>Mactype</p><p>Sublime Text</p><blockquote><p>kite</p></blockquote><p>Notepad++</p><p>PanDownload</p><p>Typora</p><p>Wise Program Uninstall</p><p>Office</p><p>Viso</p><p>Bandzip</p><p>IObit Unlocker</p><p>Resilio Sync</p><p>FireFox ESR</p><p>搜狗输入法</p><p>PotPlayer</p><p>V2</p><p>WeChat</p><p>WeChat Work</p><p>Quick Look</p><blockquote><p>Plugin.EpubViewer</p><p>Plugin.OfficeViewer</p></blockquote><p>12306Bypass</p><p>ffmpeg</p><p>you-get</p><p>HoneyView</p><p>Node.js</p><p>Hexo</p><p>Recuva</p><p>System Box</p><p>盘姬工具箱</p><p>MotionPro</p></blockquote><h2 id="休闲"><a href="#休闲" class="headerlink" title="休闲"></a>休闲</h2><blockquote><p>人人影视</p><p>网易云音乐</p></blockquote><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><blockquote><p>YAHEI CONSOLA HYBRID</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> PC </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关Blog</title>
      <link href="/you-guan-blog.html"/>
      <url>/you-guan-blog.html</url>
      
        <content type="html"><![CDATA[<h1 id="文章推送"><a href="#文章推送" class="headerlink" title="文章推送"></a>文章推送</h1><pre><code>#一般步骤hexo new "名称" 新建文章hexo g 生成静态文件hexo s 本地服务器 hexo d 部署# 出现问题hexo server -p 5000 更改端口为5000hexo g -d 生成并部署hexo d -g 生成并部署</code></pre><h1 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h1><h2 id="1-U盘备份"><a href="#1-U盘备份" class="headerlink" title="1. U盘备份"></a>1. U盘备份</h2><p>如题。</p><h2 id="2-Github、Gitee备份"><a href="#2-Github、Gitee备份" class="headerlink" title="2. Github、Gitee备份"></a>2. Github、Gitee备份</h2><ol><li><p>新建远程仓库，名字最好与本地博客目录名字一致，切记不要勾选Readme和.gitignore，只填仓库名称和介绍即可。</p></li><li><p>在本地博客目录下初始化仓库<code>git init</code>，添加忽略规则<code>*.log</code><br> <code>public/</code>  <code>.deploy*/</code>，至少包含这三项。</p></li><li><p><code>git add --all</code> , <code>git commit -m "message"</code>，建立本地仓库。</p></li><li><p>关联远程仓库</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">git</span> remote add github git@github.com:username/reponame.git <span class="token function">git</span> remote add gitee git@gitee.com:username/reponame.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>推送到远程仓库 <code>git push -u github master</code>,<code>git push -u github master</code></p></li></ol><p>注：其实懂得git就很简单了。</p><h2 id="3-博客恢复"><a href="#3-博客恢复" class="headerlink" title="3. 博客恢复"></a>3. 博客恢复</h2><p>暂时未遇到，待续。</p><h1 id="Gitee图床"><a href="#Gitee图床" class="headerlink" title="Gitee图床"></a>Gitee图床</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Gitee创建仓库用来保存图片，把图片地址中的<code>blob</code>改为<code>raw</code>即可，前提是要开启Gitee服务，并且仓库是公开的。平时使用只需要把文章的图片放到图床对应的本地目录，完成文章后<code>git push</code>，在改地址放入文中即可，这样文章的图片双备份。</p><p>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">知识共享署名 4.0 国际许可协议</a>进行许可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/git-xue-xi-bi-ji.html"/>
      <url>/git-xue-xi-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h2 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h2><ol><li><p>避免使用包含中文的路径；</p></li><li><p>没事别改.git里的文件；</p></li><li><p>不要使用windows自带的记事本；</p></li></ol><h2 id="0-初识Git"><a href="#0-初识Git" class="headerlink" title="0. 初识Git"></a>0. 初识Git</h2><p>​     Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p><p>​    Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。其作者为Linus，就是熟为人知的开源系统Linux的作者，Git的初衷就是为了管理Linux代码。</p><h2 id="1-Git安装"><a href="#1-Git安装" class="headerlink" title="1. Git安装"></a>1. Git安装</h2><ol><li>从Git<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载安装包安装。  </li><li>使用<a href="https://cmder.net/" target="_blank" rel="noopener">cmder</a>的 <strong>Full</strong> 版本with Git for Windows，推荐使用。</li></ol><h2 id="2-Git使用"><a href="#2-Git使用" class="headerlink" title="2. Git使用"></a>2. Git使用</h2><h3 id="2-1-配置用户信息"><a href="#2-1-配置用户信息" class="headerlink" title="2.1 配置用户信息"></a>2.1 配置用户信息</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your User Name"</span><span class="token function">git</span> config --global user.email <span class="token string">"Your Email Address"</span><span class="token comment" spellcheck="true">#配置完成后，使用以下命令查看配置信息</span><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意使用了<strong>–global</strong>参数，这一步更改的信息位于用户目录下的配置文件，~/.gitconfig ，表示以后的项目都是用这个配置信息，当然可以通过更改当前项目的 .git/config 文件来配置特定的信息，去掉 <strong>–global</strong>即可。</p><h3 id="2-2基本命令"><a href="#2-2基本命令" class="headerlink" title="2.2基本命令"></a>2.2基本命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#初始化仓库</span><span class="token function">git</span> init<span class="token function">git</span> init name<span class="token comment" spellcheck="true">#添加文件到暂存区,可多次使用</span><span class="token function">git</span> add <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment" spellcheck="true">#提交暂存区文件到分支</span><span class="token function">git</span> commit -m <span class="token string">"message"</span><span class="token comment" spellcheck="true">#查看仓库状态</span><span class="token function">git</span> status<span class="token comment" spellcheck="true">#查看不同</span><span class="token function">git</span> <span class="token function">diff</span><span class="token comment" spellcheck="true">#查看提交历史记录</span><span class="token function">git</span> log<span class="token function">git</span> log --graph<span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline<span class="token comment" spellcheck="true">#版本回退，到上n个，HEAD指向当前版本</span><span class="token function">git</span> reset --hard HEAD~n<span class="token comment" spellcheck="true">#查看命令历史</span><span class="token function">git</span> reflog<span class="token comment" spellcheck="true">#丢弃工作区的修改，回到上一次add时状态,实际上是用版本库里的版本替换工作区的版本</span><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true">#撤销暂存区的修改到工作区</span><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true">#删除文件</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true">#关联远程仓库</span><span class="token function">git</span> remote add origin git@github.com:username/reponame.git<span class="token comment" spellcheck="true">#推送本地库到远程仓库</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true">#首次推送，-u参数关联本地与远程master分支</span><span class="token function">git</span> push origin master<span class="token comment" spellcheck="true">#克隆，ssh协议最快</span><span class="token function">git</span> clone git@github.com:username/reponame.git<span class="token comment" spellcheck="true">#创建分支</span><span class="token function">git</span> branch dev<span class="token comment" spellcheck="true">#切换分支</span><span class="token function">git</span> checkout dev<span class="token function">git</span> switch master<span class="token comment" spellcheck="true">#创建并切换分支</span><span class="token function">git</span> checkout -b dev<span class="token function">git</span> switch -c dev<span class="token comment" spellcheck="true">#查看当前分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true">#合并指定分支到当前分支</span><span class="token function">git</span> merge dev         <span class="token comment" spellcheck="true">#Fast Forward模式，合并后看不出来曾经合并过</span><span class="token function">git</span> merge --no-ff -m <span class="token string">"merge with no-ff"</span> dev  <span class="token comment" spellcheck="true">#禁用Fast Forward，可以看出合并</span><span class="token comment" spellcheck="true">#删除分支</span><span class="token function">git</span> branch -d dev<span class="token function">git</span> branch -D <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true">#强制删除未合并的分支</span><span class="token comment" spellcheck="true">#暂存当前工作</span><span class="token function">git</span> stash<span class="token comment" spellcheck="true">#恢复</span><span class="token function">git</span> stash apply<span class="token comment" spellcheck="true">#删除</span><span class="token function">git</span> stash drop<span class="token comment" spellcheck="true">#恢复并删除</span><span class="token function">git</span> stash pop<span class="token comment" spellcheck="true">#复制特定的提交到当前分支</span><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit<span class="token operator">></span><span class="token comment" spellcheck="true">#查看远程库信息</span><span class="token function">git</span> remote <span class="token punctuation">(</span>-v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#推送分支</span><span class="token function">git</span> push origin dev<span class="token comment" spellcheck="true">#创建并切换到远程库dev分支</span><span class="token function">git</span> checkout -b dev origin/dev<span class="token comment" spellcheck="true">#拉取更新，push前一般先pull</span><span class="token function">git</span> pull<span class="token comment" spellcheck="true">#创建标签</span><span class="token function">git</span> tag v1.0<span class="token function">git</span> tag -a <span class="token operator">&lt;</span>tagname<span class="token operator">></span> -m <span class="token string">"blablabla..."</span><span class="token comment" spellcheck="true">#查看标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true">#删除标签</span><span class="token function">git</span> tag -d v1.0<span class="token comment" spellcheck="true">#推送标签到远程</span><span class="token function">git</span> push origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3重要概念"><a href="#2-3重要概念" class="headerlink" title="2.3重要概念"></a>2.3重要概念</h3><p><strong>工作区</strong>(Working Directory)指的是电脑里能看到的目录</p><p><strong>版本库</strong>隐藏目录<strong>.git</strong>，不算是工作区</p><p><strong>暂存区</strong>(stage , index)<strong>.git</strong>目录下的index文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/Ldufan/Blog_Picture/raw/master/%E5%B7%A5%E4%BD%9C%E5%8C%BA.jpeg" alt="工作区"></p><h2 id="3-Gitee与Github"><a href="#3-Gitee与Github" class="headerlink" title="3. Gitee与Github"></a>3. Gitee与Github</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#同时关联Github与Gitee</span><span class="token function">git</span> remote add github git@github.com:username/reponame.git<span class="token function">git</span> remote add gitee git@gitee.com:username/reponame.git<span class="token function">git</span> push github master<span class="token function">git</span> push gitee master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Gitee和Github同时配置ssh-key"><a href="#Gitee和Github同时配置ssh-key" class="headerlink" title="Gitee和Github同时配置ssh key"></a>Gitee和Github同时配置ssh key</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#生成key</span><span class="token function">cd</span> ~/.sshssh-keygen -t rsa -C <span class="token string">"X@163.com"</span> -f <span class="token string">"github_id_rsa"</span>ssh-keygen -t rsa -C <span class="token string">"X@163.com"</span> -f <span class="token string">"gitee_id_rsa"</span><span class="token comment" spellcheck="true">#添加到对应平台</span><span class="token function">cat</span> github_id_rsa<span class="token function">cat</span> gitee_id_rsa<span class="token comment" spellcheck="true">#创建config解决冲突</span><span class="token comment" spellcheck="true"># gitee</span>Host gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa<span class="token comment" spellcheck="true"># github</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa<span class="token comment" spellcheck="true">#测试，返回welcome或successful等字样成功</span><span class="token function">ssh</span> -T git@gitee.com<span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-自定义Git"><a href="#4-自定义Git" class="headerlink" title="4.自定义Git"></a>4.自定义Git</h2><p><strong>–global</strong>对当前用户起作用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.st status<span class="token function">git</span> config --global alias.co checkout<span class="token function">git</span> config --global alias.ci commit -m<span class="token function">git</span> config --global alias.br branch<span class="token comment" spellcheck="true">#撤销暂存区修改</span><span class="token function">git</span> config --global alias.unstage <span class="token string">'reset HEAD'</span><span class="token comment" spellcheck="true">#显示最后一次提交信息</span><span class="token function">git</span> config --global alias.last <span class="token string">'log -1'</span><span class="token function">git</span> config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-一些问题"><a href="#5-一些问题" class="headerlink" title="5. 一些问题"></a>5. 一些问题</h2><p>git pull origin master 时出现错误</p><pre class="line-numbers language-bash"><code class="language-bash">fatal: refusing to merge unrelated histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因一般是建仓库时初始化了readme.md</p><p>解决办法一</p><blockquote><p>强制合并无关历史,不建议</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>解决办法二</p><blockquote><p>从远端库clone到本地，把本地要加入的代码放到远端库下载到本地的库，然后再提交。</p></blockquote><p>本作品采用<a rel="noopener" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">知识共享署名 4.0 国际许可协议</a>进行许可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Word</title>
      <link href="/hello-word.html"/>
      <url>/hello-word.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h1><p>​    Hello Word！This is my first blog!</p><p>​    这是我的第一篇博客，以后这里将成为我的秘密花园。</p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1403136561&amp;auto=1&amp;height=66"></iframe></div><p>​    本博客采用广为流传的Hexo+Github搭建，初衷就是想找一个地方做的学习记录和采坑记录。人生就是不断地挖坑和填坑的过程，实际上更为残酷的是坑不挖也会有，但不填决不会自己消失。</p><p>​    学无止境，择善而从！<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
